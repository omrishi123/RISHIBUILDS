/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict admin-only access model for the `appArtifacts` collection. Only authenticated administrators can create, read, update, or delete app artifacts.
 *
 * Data Structure:
 * All app artifact data is stored in the top-level `/appArtifacts/{appArtifactId}` collection.
 *
 * Key Security Decisions:
 * - Public listing of app artifacts is explicitly disallowed to prevent unauthorized access.
 * - All write operations require the user to be authenticated (admin role).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages application artifacts.  Accessible only to authenticated admins via Firebase Authentication.
     * @path /appArtifacts/{appArtifactId}
     * @allow (create) - Authenticated admin creates an app artifact.
     * @allow (get) - Authenticated admin retrieves an app artifact.
     * @allow (update) - Authenticated admin updates an app artifact.
     * @allow (delete) - Authenticated admin deletes an app artifact.
     * @deny (create) - Unauthenticated user attempts to create an app artifact.
     * @deny (get) - Unauthenticated user attempts to retrieve an app artifact.
     * @deny (update) - Unauthenticated user attempts to update an app artifact.
     * @deny (delete) - Unauthenticated user attempts to delete an app artifact.
     * @principle Enforces admin-only access for managing app artifacts.
     */
    match /appArtifacts/{appArtifactId} {
      allow get: if isSignedIn();
      allow list: if false; // Explicitly disallow listing
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}