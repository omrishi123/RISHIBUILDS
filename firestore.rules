/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and access control, while relaxing data validation. It enforces a security model where data is publicly readable, but write access is restricted to authenticated users.
 *
 * Data Structure:
 * The Firestore database contains two top-level collections: `appArtifacts` and `websites`.
 *
 * Key Security Decisions:
 * - Public Read Access: Both `appArtifacts` and `websites` are publicly readable to facilitate easy data access during development.
 * - Authenticated Write Access: Write operations (create, update, delete) on both collections are restricted to authenticated users. Further role-based access control can be implemented later.
 * - No User Listing: Listing all users is implicitly denied.
 *
 * Denormalization for Authorization:
 *  - The current rules rely on authentication to restrict write access. If finer-grained control is needed (e.g., specific users can edit specific documents), consider denormalizing authorization data (e.g., an `ownerId` field) directly into the documents.
 *
 * Structural Segregation:
 *  - The app uses top-level collections for both public data (`appArtifacts`, `websites`). This avoids the need for complex read rules based on document-level flags.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to app artifacts, but restricts write access to authenticated users.
     * @path /appArtifacts/{appArtifactId}
     * @allow (get, list): Any user can read app artifact data.
     * @allow (create, update, delete): Only authenticated users can modify app artifact data.
     * @deny (create, update, delete): Unauthenticated users cannot modify app artifact data.
     * @principle Allows public read access for easy prototyping but requires authentication for write operations.
     */
    match /appArtifacts/{appArtifactId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to websites, but restricts write access to authenticated users.
     * @path /websites/{websiteId}
     * @allow (get, list): Any user can read website data.
     * @allow (create, update, delete): Only authenticated users can modify website data.
     * @deny (create, update, delete): Unauthenticated users cannot modify website data.
     * @principle Allows public read access for easy prototyping but requires authentication for write operations.
     */
    match /websites/{websiteId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

  }
}