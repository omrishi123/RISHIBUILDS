{
  "entities": {
    "AppArtifact": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AppArtifact",
      "type": "object",
      "description": "Represents an application artifact (e.g., .apk, .zip) uploaded to Firebase Storage and its metadata stored in Firestore.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AppArtifact entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the application."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the application."
        },
        "downloadURL": {
          "type": "string",
          "description": "The URL from which the application artifact can be downloaded.",
          "format": "uri"
        },
        "storagePath": {
          "type": "string",
          "description": "The path to the application artifact in Firebase Storage.  This is needed for deletion."
        },
        "createdAt": {
          "type": "string",
          "description": "A timestamp indicating when the application artifact was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "downloadURL",
        "storagePath",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/appArtifacts/{appArtifactId}",
        "definition": {
          "entityName": "AppArtifact",
          "schema": {
            "$ref": "#/backend/entities/AppArtifact"
          },
          "description": "Stores app artifact metadata.  Accessible only to authenticated admins via Firebase Authentication. Includes fields for downloadURL and storagePath for management.",
          "params": [
            {
              "name": "appArtifactId",
              "description": "The unique identifier for the app artifact."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes security, scalability, and debuggability, especially concerning authorization. It emphasizes Authorization Independence by denormalizing any necessary authorization context into the documents themselves, removing the need for `get()` calls in security rules. This prevents rule breakages from atomic operations and simplifies debugging.\n\nThe structure is segregated to enforce homogeneous security postures within collections. For instance, all `appArtifacts` are stored in a single collection, simplifying rules.\n\nAuthorization is modeled using standard patterns: a top-level collection `/appArtifacts/{appArtifactId}` ensures no complex authorization logic is needed.\n\nQAPs (Rules Are Not Filters) is supported through the use of direct collection access for artifacts, ensuring list operations are secure. Additionally, the design follows the principles of clarity, predictability, and consistency by using explicit state modeling, predictable schemas, and radical consistency in naming conventions.\n\nSpecifically, since the admin panel is the only actor uploading data and is secured by Firebase Authentication, there is no need for a more complex ownership model such as membership maps."
  }
}